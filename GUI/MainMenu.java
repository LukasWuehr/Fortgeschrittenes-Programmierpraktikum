package GUI;

import SC_Kom.Message;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;

public class MainMenu<Client> {
    private JPanel MainMenuPanel;
    private JButton playButton;
    private JList<String> list1;
    private JRadioButton connectFourRadioButton;
    private JRadioButton chompRadioButton;
    private JSpinner heightSpinner;
    private JSpinner lengthSpinner;
    private JComboBox playerComboBox;
    private JButton inviteButton;
    private JButton cancelButton;
    private JLabel invitesLabel;
    private ArrayList<String> invites = new ArrayList<>();
    MainScreen mainScreen;

    public MainMenu(MainScreen mainScreen) {
        inviteButton.setBackground(Color.LIGHT_GRAY);
        cancelButton.setBackground(Color.LIGHT_GRAY);
        playerComboBox.setBackground(Color.LIGHT_GRAY);
        heightSpinner.setBackground(Color.LIGHT_GRAY);
        lengthSpinner.setBackground(Color.LIGHT_GRAY);
        playButton.setBackground(Color.LIGHT_GRAY);
        playerComboBox.addItem("@Computer");
        // list1.setListData((String[]) invites.toArray());
        list1.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent mouseEvent) {
                String invite = list1.getSelectedValue();
                invites.remove(invite);
                list1.setListData(invites.toArray(new String[0]));
                synchronized (this) {
                    Message.sendMessage(9);
                    Message.sendMessage(invite);
                }
                //mainScreen.setPanel(Connect4Gui.getPanel); // noch enscheidung hinzufuegen
            }

            @Override
            public void mousePressed(MouseEvent mouseEvent) {

            }

            @Override
            public void mouseReleased(MouseEvent mouseEvent) {

            }

            @Override
            public void mouseEntered(MouseEvent mouseEvent) {

            }

            @Override
            public void mouseExited(MouseEvent mouseEvent) {

            }
        });
        inviteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                changeMenu();
                if (!playerComboBox.getSelectedItem().equals("@Computer")) {
                    String invite = mainScreen.getPLayer() + "#";
                    if (connectFourRadioButton.isSelected()) {
                        invite += "ConnectFour#";
                    } else {
                        invite += "Chomp#";
                    }
                    invite += Math.abs((int) lengthSpinner.getValue()) + "x" + Math.abs((int) heightSpinner.getValue());
                    synchronized (this) {
                        Message.sendMessage(8);
                        Message.sendMessage((String) playerComboBox.getSelectedItem());
                        Message.sendMessage(invite);
                    }
                } else {
                    mainScreen.startGame("@Computer", connectFourRadioButton.isSelected() ? "ConnectFour" : "Chomp", (int) lengthSpinner.getValue(), (int) heightSpinner.getValue(), 1);
                }
            }
        });

        playButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                changeMenu();
            }
        });
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                changeMenu();
            }
        });

    }

    private void changeMenu() {
        playButton.setVisible(!playButton.isVisible());
        list1.setVisible(!list1.isVisible());
        connectFourRadioButton.setVisible(!connectFourRadioButton.isVisible());
        chompRadioButton.setVisible(!chompRadioButton.isVisible());
        heightSpinner.setVisible(!heightSpinner.isVisible());
        lengthSpinner.setVisible(!lengthSpinner.isVisible());
        playerComboBox.setVisible(!playerComboBox.isVisible());
        inviteButton.setVisible(!inviteButton.isVisible());
        cancelButton.setVisible(!cancelButton.isVisible());
        invitesLabel.setVisible(!invitesLabel.isVisible());
    }

    public void setPlayerComboBox(String player) {
        playerComboBox.addItem(player);
    }

    public void removePlayerComboBox(String player) {
        playerComboBox.removeItem(player);
    }

    public void setInvites(String invite) {
        invites.add(invite);            // PLayername#Game#lxh
        list1.setListData(invites.toArray(new String[0]));

    }

    public JPanel getCurrentPanel() {
        return MainMenuPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MainMenuPanel = new JPanel();
        MainMenuPanel.setLayout(new CardLayout(0, 0));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(11, 5, new Insets(0, 0, 0, 0), -1, -1));
        MainMenuPanel.add(panel1, "Card1");
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("JetBrains Mono", -1, 24, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setHorizontalAlignment(0);
        label1.setHorizontalTextPosition(0);
        label1.setText("MAINMENU");
        panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        playButton = new JButton();
        Font playButtonFont = this.$$$getFont$$$("JetBrains Mono", -1, 16, playButton.getFont());
        if (playButtonFont != null) playButton.setFont(playButtonFont);
        playButton.setText("Play");
        panel1.add(playButton, new com.intellij.uiDesigner.core.GridConstraints(3, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(3, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer3, new com.intellij.uiDesigner.core.GridConstraints(10, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer4 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer4, new com.intellij.uiDesigner.core.GridConstraints(2, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer5 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer5, new com.intellij.uiDesigner.core.GridConstraints(5, 3, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer6 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer6, new com.intellij.uiDesigner.core.GridConstraints(9, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer7 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer7, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        list1 = new JList();
        Font list1Font = this.$$$getFont$$$("JetBrains Mono", -1, -1, list1.getFont());
        if (list1Font != null) list1.setFont(list1Font);
        panel1.add(list1, new com.intellij.uiDesigner.core.GridConstraints(8, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        connectFourRadioButton = new JRadioButton();
        connectFourRadioButton.setEnabled(true);
        Font connectFourRadioButtonFont = this.$$$getFont$$$("JetBrains Mono", -1, 14, connectFourRadioButton.getFont());
        if (connectFourRadioButtonFont != null) connectFourRadioButton.setFont(connectFourRadioButtonFont);
        connectFourRadioButton.setSelected(true);
        connectFourRadioButton.setText("Connect Four");
        connectFourRadioButton.setVisible(false);
        panel1.add(connectFourRadioButton, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chompRadioButton = new JRadioButton();
        chompRadioButton.setEnabled(true);
        Font chompRadioButtonFont = this.$$$getFont$$$("JetBrains Mono", -1, 14, chompRadioButton.getFont());
        if (chompRadioButtonFont != null) chompRadioButton.setFont(chompRadioButtonFont);
        chompRadioButton.setText("Chomp");
        chompRadioButton.setVisible(false);
        panel1.add(chompRadioButton, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        invitesLabel = new JLabel();
        invitesLabel.setText("Invites");
        panel1.add(invitesLabel, new com.intellij.uiDesigner.core.GridConstraints(7, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$("JetBrains Mono", -1, -1, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setText("Height");
        label2.setVisible(false);
        panel1.add(label2, new com.intellij.uiDesigner.core.GridConstraints(5, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        heightSpinner = new JSpinner();
        Font heightSpinnerFont = this.$$$getFont$$$("JetBrains Mono", -1, 14, heightSpinner.getFont());
        if (heightSpinnerFont != null) heightSpinner.setFont(heightSpinnerFont);
        heightSpinner.setVisible(false);
        panel1.add(heightSpinner, new com.intellij.uiDesigner.core.GridConstraints(5, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Length");
        label3.setVisible(false);
        panel1.add(label3, new com.intellij.uiDesigner.core.GridConstraints(6, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lengthSpinner = new JSpinner();
        Font lengthSpinnerFont = this.$$$getFont$$$("JetBrains Mono", -1, 14, lengthSpinner.getFont());
        if (lengthSpinnerFont != null) lengthSpinner.setFont(lengthSpinnerFont);
        lengthSpinner.setVisible(false);
        panel1.add(lengthSpinner, new com.intellij.uiDesigner.core.GridConstraints(6, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        playerComboBox = new JComboBox();
        Font playerComboBoxFont = this.$$$getFont$$$("JetBrains Mono", -1, -1, playerComboBox.getFont());
        if (playerComboBoxFont != null) playerComboBox.setFont(playerComboBoxFont);
        playerComboBox.setVisible(false);
        panel1.add(playerComboBox, new com.intellij.uiDesigner.core.GridConstraints(8, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        Font label4Font = this.$$$getFont$$$("JetBrains Mono", -1, -1, label4.getFont());
        if (label4Font != null) label4.setFont(label4Font);
        label4.setText("Player");
        label4.setVisible(false);
        panel1.add(label4, new com.intellij.uiDesigner.core.GridConstraints(8, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        inviteButton = new JButton();
        Font inviteButtonFont = this.$$$getFont$$$("JetBrains Mono", -1, -1, inviteButton.getFont());
        if (inviteButtonFont != null) inviteButton.setFont(inviteButtonFont);
        inviteButton.setText("Invite");
        inviteButton.setVisible(false);
        panel1.add(inviteButton, new com.intellij.uiDesigner.core.GridConstraints(9, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancelButton = new JButton();
        Font cancelButtonFont = this.$$$getFont$$$("JetBrains Mono", -1, -1, cancelButton.getFont());
        if (cancelButtonFont != null) cancelButton.setFont(cancelButtonFont);
        cancelButton.setText("Cancel");
        cancelButton.setVisible(false);
        panel1.add(cancelButton, new com.intellij.uiDesigner.core.GridConstraints(9, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(connectFourRadioButton);
        buttonGroup.add(chompRadioButton);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainMenuPanel;
    }

}
