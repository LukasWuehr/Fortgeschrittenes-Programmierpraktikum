package GUI;

import SC_Kom.Message;
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import games.Player;


public class ChompGui {

    JButton ButtonArray[][];
    int length;
    int height;
    Player player;
    int turns = 0;
    private JPanel panel1;
    private JPanel chompPanel;
    private JPanel headPanel;

//Bananatest
    public ChompGui(int length, int height) {
        this.chompPanel.setLayout(new GridLayout(length, height));
        ButtonArray = new JButton[length][height];
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < length; j++) {
                ButtonArray[j][i] = new JButton();
                ButtonArray[j][i].setBackground(Color.WHITE);
                chompPanel.add(ButtonArray[j][i]);
                ButtonArray[j][i].addMouseListener(new GridMouseListener(j, i) {
                    @Override
                    public void mouseClicked(MouseEvent mouseEvent) {
                        if (ButtonArray[j][i].getBackground() == Color.WHITE) {
                            turns++;
                            colorButtons(j, i);
                            String turn = "chomp," + player.getPlayerName() + "," + turns + ",";
                            turn += Integer.toString(i) + "," + Integer.toString(j);
                            Message.sendMessage(10);
                            Message.sendMessage(turn);
                            if (checkLost()) {
                            }//Dann muss ausgegeben werden, dass man verloren hat
                        }
                    }

                    @Override
                    public void mouseEntered(MouseEvent mouseEvent) {
                        if (ButtonArray[j][i].getBackground() != Color.BLACK)
                            colorButtons(j, i, Color.RED);
                    }

                    @Override
                    public void mouseExited(MouseEvent mouseEvent) {
                        if (ButtonArray[j][i].getBackground() != Color.BLACK)
                            colorButtons(j, i, Color.WHITE);
                    }
                });
            }
        }
    }

    public void colorButtons(int lengthindex, int heightindex) {
        for (int i = heightindex; i < height; i++) {
            for (int j = lengthindex; j < length; j++) {
                ButtonArray[j][i].setBackground(Color.BLACK);
            }
        }
    }

    public JPanel getChompPanel() {
        return chompPanel;
    }

    public void colorButtons(int lengthindex, int heightindex, Color x) {//FÃ¤rbt nur nichtschwarze Felder!
        for (int i = heightindex; i < height; i++) {
            for (int j = lengthindex; j < length; j++) {
                if (ButtonArray[j][i].getBackground() != Color.BLACK) ButtonArray[j][i].setBackground(x);
            }
        }
    }

    public boolean checkTaken(int lengthindex, int heightindex) {
        if (ButtonArray[lengthindex][heightindex].getBackground() == Color.BLACK) return true;
        else return false;
    }

    public boolean checkLost() {
        return checkTaken(0, 0);
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        chompPanel = new JPanel();
        chompPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(chompPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel2.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

}
