package server;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

public class Gui implements ActionListener {
    private JTextArea log;
    private JTextArea playerOnline;
    private JButton closeServerButton;
    private JTextField logInput;
    private JPanel guiPanel;

    public Gui() {
        JFrame frame = new JFrame("SERVER");
        frame.setContentPane(guiPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        closeServerButton.setBackground(Color.LIGHT_GRAY);
        closeServerButton.setForeground(Color.DARK_GRAY);
        frame.pack();
        frame.setSize(500, 500);
        frame.setVisible(true);
        closeServerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                for (ClientNode client : MulServerThread.clients) {
                    client.sendMessage((byte) 0, 0);
                }
                frame.dispose();
                System.exit(0);
            }
        });
        logInput.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                String input = logInput.getText();
                logInput.setText("");
                log.setText(log.getText() + "\n" + input);
            }
        });

    }

    public void setLog(String s) {
        log.setText(log.getText() + "\n" + s);
    }

    public void addPlayer(String name) {
        playerOnline.setText(playerOnline.getText() + "\n" + name);
    }

    public void removePlayer(String name) {
        String text = playerOnline.getText();
        String players = "";
        for (String player : text.split("\n" + name)) {
            players += player;
        }
        playerOnline.setText(players);
    }

    public static void main(String[] args) {
        try {
            Server server = new Server(new Gui());
            ServerInput serverInput = new ServerInput();
            serverInput.start();
        } catch (IOException e) {
        }
    }

    @Override
    public void actionPerformed(ActionEvent actionEvent) {

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        guiPanel = new JPanel();
        guiPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));
        guiPanel.setForeground(new Color(-7896951));
        closeServerButton = new JButton();
        closeServerButton.setBackground(new Color(-12698050));
        closeServerButton.setForeground(new Color(-4871245));
        closeServerButton.setText("CloseServer");
        guiPanel.add(closeServerButton, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        logInput = new JTextField();
        guiPanel.add(logInput, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        guiPanel.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        log = new JTextArea();
        log.setEditable(false);
        scrollPane1.setViewportView(log);
        final JScrollPane scrollPane2 = new JScrollPane();
        guiPanel.add(scrollPane2, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        playerOnline = new JTextArea();
        playerOnline.setEditable(false);
        scrollPane2.setViewportView(playerOnline);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return guiPanel;
    }

}
